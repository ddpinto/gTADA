args <- commandArgs(TRUE)
pT <- as.character(args[1])
inDEX <- as.character(args[2])
OUTDIR_LLK <- as.character(args[3])


if (pT == "SCZ"){
    load("W_AddGeneSet1/DN.adjustBeta.1.1.nI5000.nThin.1.index.14_13_Mar_02_2017.lof_SCZ.damaging_SCZ.nGroupDN.2.nGroupCC.2.adjustRatio.1.0.05.sigmaPrior.6.5.RData")
#load("W_EPIgeneSetN2_BayesianPrior/DN.adjustBeta.1.1.nI5000.nThin.1.index.14_20_Feb_12_2017.lof_SCZ.damaging_SCZ.nGroupDN.2.nGroupCC.2.adjustRatio.1.0.05.sigmaPrior.4.951.RData")
}
if (pT == "ASD")
    load("W_AUTgeneSet1/AUTgeneSet.0..adjustRatioMut.1.3.nIteration2000.nThin.2.index.20_15_10_April.nGroupDN.3.nGroupCC.3.damaging.SameBeta.RData")

###########
data2 <- read.table("~/psychgen/methods/extTADA/scripts/TADA/data/ASC_2231trios_1333trans_1601cases_5397controls.csv",
                    sep = ",", header = TRUE)

dirGeneSet <- "/hpc/users/nguyet26/psychgen/methods/extTADA/Re_annotate/PvalueGeneList/genesListAllPaper/"
gS1 <- dir(dirGeneSet, ".txt$")
gS1L <- sapply(gS1, function(x) length(readLines(paste0(dirGeneSet, x))))
gS1L <- gS1L[gS1L>100]
gS1L <- gS1L[gS1L<4000]
length(gS1L)
geneSetName <- names(gS1L)

geneSetName <- geneSetName[grep("denovo|FDR|essentialGenes|listLoFtolerantEXAC|listMcRae2016.txt",
                                geneSetName, ignore.case = TRUE, invert = TRUE)]
#geneSetName <- head(geneSetName, 3)
#geneSetName <- c("fmrp.txt")#, "constrained.txt")#, "essentialGenes.txt", "cahoy.txt", "psd95.txt", "mir137.txt", "synaptome.txt",     "GO:0009653.txt")
                 ##Heart Disease
#                 )

 gAll <- data[, 1]
geneSetM <- matrix(0, ncol = length(geneSetName), nrow = dim(data)[1])

for (ii in 1:length(geneSetName)){
    g1 <- readLines(paste0(dirGeneSet, geneSetName[ii]))
    g11 <- pmatch(g1, gAll)
    g11 <- g11[!is.na(g11)]
    if (dim(geneSetM)[2] > 1)
    geneSetM[g11, ][, ii] <- 1
    else
        geneSetM[g11,] <- 1
 #   print(length(g11)) #table(g11)
#    print(table(geneSetM[, ii]))

    }

###Remove not sig gene sets
#p1 <- NULL
#y <- rowSums(allDNData)
#for (i in 1:dim(geneSetM)[2]){
 #   z <- geneSetM[, i]
  #  a1 <- glm(z ~ y)
   # p1[i] <- (summary(a1)$coefficients)[2, 4]
    #p1[i] <- ifelse(is.na(p1[i]), 1, p1[i])
#}

colnames(geneSetM) <- geneSetName
#geneSetNameN <- geneSetName[p1 < 0.01]
#geneSetMN <-    geneSetM[, geneSetNameN]


names(p1) <- geneSetName
p1 <- sort(p1)
#geneSetM <- cbind(geneSetM, geneSetM,
 #                 sample(0:1, size = dim(geneSetM)[1], replace = TRUE, prob = c(0.95, 1 - 0.95)),
  #                sample(0:1, size = dim(geneSetM)[1], replace = TRUE, prob = c(0.9, 1 - 0.9)),
   #               sample(0:1, size = dim(geneSetM)[1], replace = TRUE, prob = c(0.8, 1 - 0.8))             )
#geneSetName <- c(geneSetName, paste0(geneSetName, "1"), "RandomGene1_0.05", "RandomGene2_0.1",  "RandomGene2_0.2")

################

dD <- mixDataKclasses$dataDN #)allDNData
muRate <- mixDataKclasses$mutRate #allMutData
nFamily <- mixDataKclasses$Ndn


caseData <- data.frame(data2[, c("case.mis3", "case.LoF")] +
                       data2[, c("trans.mis3", "trans.LoF")])
controlData <- data.frame(data2[, c("ctrl.mis3", "ctrl.LoF")] +
                       data2[, c("ntrans.mis3", "ntrans.LoF")])


geneSet <- geneSetM

nCol <- ncol(dD)
nRow <- nrow(dD)
nGeneSet <- ncol(geneSet)

dataCCcase <-    mixDataKclasses$dataCCcase
dataCCtotal <- mixDataKclasses$dataCCtotal
thetaH0 <- mixDataKclasses$Ncase/mixDataKclasses$Ntotal
Ncase <- mixDataKclasses$Ncase
Ncontrol <- mixDataKclasses$Ncontrol

pars <- c(2, 30, 1, 1, ##De novo data
          3, 3, 4, 4, ##Case-control data
          rep(1, nGeneSet), 1)

#pT = 1
nDN = 2
nCC=2

llk0 <- function(pars){
        hyperGammaMean <- pars[1:nDN]
        hyperBeta <- pars[(nDN + 1):(2*nDN)]
        hyperGammaMeanCC <- pars[(2*nDN + 1):(2*nDN +nCC)]
        hyperBetaCC <- pars[(2*nDN + nCC + 1):(2*nDN + 2*nCC)]
        alpha0 <- pars[(2*nDN + 2*nCC +1):(2*nDN + 2*nCC + nGeneSet + 1)]
#        alphaIntercept <- tail(pars, 1)

        f0 <- f1 <- 1
        ##De novo data
        for (j in 1:nDN){
            f0 <- f0*dpois(dD[, j], 2*nFamily[j]*muRate[, j])
            f1<- f1*dnbinom(dD[, j], hyperGammaMean[j]*hyperBeta[j], hyperBeta[j]/(hyperBeta[j] + 2*nFamily[j]*muRate[, j]))
            
            }
         ## Case-control data
        for (jj in 1:nCC){
            f0 <- f0*dbinom(dataCCcase[, jj], dataCCtotal[, jj], thetaH0[jj]);
            fTemp <- apply(data.frame(dataCCcase[, jj], dataCCtotal[, jj]), 1,
                           function(xRow){
                               f.Int <- function(gammaCC)
                                   dbinom(xRow[1], xRow[2], Ncase[jj]*gammaCC/(Ncase[jj]*gammaCC + Ncontrol[jj]))*dgamma(gammaCC, hyperGammaMeanCC[jj]*hyperBetaCC[jj], hyperBetaCC[jj])
                               integrate(f.Int, lower = 1, upper = 100,
                                         stop.on.error = FALSE)$value #$
                           })
#       # <- function(gammaCC) dbinom(dataCCcase[, jj], dataCCtotal[, jj], Ncase[jj]*gammaCC/(Ncase[jj]*gammaCC + Ncontrol[jj]))*dgamma(gammaCC, hyperGammaMeanCC[jj]*hyperBetaCC[jj], hyperBetaCC[jj])
#            fInt <- integrate(Vectorize(fTemp), lower = 1, upper = 100)
            f1 <- f1*fTemp

        }
        
        pi1 <- rep(exp(alpha0)/(1 + exp(alpha0)), dim(dD)[1])
        
        tllk <- sum(log(f1*pi1 + (1 - pi1)*f0))
###lasso
#        tllk <- tllk - pT*sum(abs(alpha0))
#ridge 
#        tllk <- tllk - pT*sum((alpha0^2))

        return(-tllk)
    }

nGeneSet <- ncol(geneSet)
nGeneSet = 0
pars <- c(2, 30, 1, 1, ##De novo data
          3, 3, 4, 4, ##Case-control data
          rep(1, nGeneSet), 1)

pars <- c(2.00536,  29.9625, 0.996499, 0.985555,  2.82984,
          2.17234,  3.99693,  3.94521, 0.800000)
#system.time(returnValue0 <- optim(par = pars, fn = llk0,
 #                        lower = c(rep(1, nCol), rep(0.8, nCol), rep(-10, nGeneSet + 1)),
  #                       upper = c(rep(200, nCol), rep(200, nCol), rep(10, nGeneSet + 1))))
                        #method = "Brent"))
returnValue0 <- nlminb(start = pars, objective=llk0, control = list(trace = TRUE, iter.max = 10),
       lower = c(rep(1, nCol), rep(0.8, nCol), rep(1, nCol), rep(0.8, nCol),
                 rep(-10, nGeneSet + 1)),
       upper = c(rep(200, nCol), rep(200, nCol), rep(200, nCol), rep(200, nCol), rep(10, nGeneSet + 1)))

####Add gene sets
data2 <- read.table("~/psychgen/methods/extTADA/scripts/TADA/data/ASC_2231trios_1333trans_1601cases_5397controls.csv", sep = ",", header = TRUE)

dirGeneSet <- "/hpc/users/nguyet26/psychgen/methods/extTADA/Re_annotate/PvalueGeneList/genesListAllPaper/"
gS1 <- dir(dirGeneSet, ".txt$")
gS1L <- sapply(gS1, function(x) length(readLines(paste0(dirGeneSet, x))))
gS1L <- gS1L[gS1L>100]
gS1L <- gS1L[gS1L<4000]
length(gS1L)
geneSetName <- names(gS1L)

tOut <- returnValue0$objective #value

###Statrt to add genes
llk1 <- function(pars){
            hyperGammaMean <- pars[1:nDN]
        hyperBeta <- pars[(nDN + 1):(2*nDN)]
        hyperGammaMeanCC <- pars[(2*nDN + 1):(2*nDN +nCC)]
        hyperBetaCC <- pars[(2*nDN + nCC + 1):(2*nDN + 2*nCC)]
        alpha0 <- pars[(2*nDN + 2*nCC +1):(2*nDN + 2*nCC + nGeneSet + 1)]
        alphaIntercept <- tail(pars, 1)
        f0 <- f1 <- 1

            for (j in 1:nCol){
            f0 <- f0*dpois(dD[, j], 2*nFamily[j]*muRate[, j])
            f1<- f1*dnbinom(dD[, j], hyperGammaMean[j]*hyperBeta[j], hyperBeta[j]/(hyperBeta[j] + 2*nFamily[j]*muRate[, j]))
            }

   ## Case-control data
           for (jj in 1:nCC){
            f0 <- f0*dbinom(dataCCcase[, jj], dataCCtotal[, jj], thetaH0[jj]);
            fTemp <- apply(data.frame(dataCCcase[, jj], dataCCtotal[, jj]), 1,
                           function(xRow){
                               f.Int <- function(gammaCC)
                                   dbinom(xRow[1], xRow[2], Ncase[jj]*gammaCC/(Ncase[jj]*gammaCC + Ncontrol[jj]))*dgamma(gammaCC, hyperGammaMeanCC[jj]*hyperBetaCC[jj], hyperBetaCC[jj])
                               integrate(f.Int, lower = 1, upper = 100,
                                         stop.on.error = FALSE)$value #$
                           })
            f1 <- f1*fTemp
        }
        
            
        pi1 <- apply(geneSet, 1, function(x){
            #pi1 = exp(geneSet)/(1 + exp(geneSet))
            exp0 <- exp(alphaIntercept + sum(alpha0*x))
            return(exp0/(1 + exp0))})
        tllk <- sum(log(f1*pi1 + (1 - pi1)*f0))
###lasso
#        tllk <- tllk - pT*sum(abs(alpha0))
#ridge 
#        tllk <- tllk - pT*sum((alpha0^2))

        return(-tllk)
    }



    geneSetName <- names(p1)
    gAll <- data[, 1]
    geneSetM <- matrix(0, ncol = length(geneSetName), nrow = dim(data)[1])

for (ii in 1:length(geneSetName)){
    g1 <- readLines(paste0(dirGeneSet, geneSetName[ii]))
    g11 <- pmatch(g1, gAll)
    g11 <- g11[!is.na(g11)]
    if (dim(geneSetM)[2] > 1)
    geneSetM[g11, ][, ii] <- 1
    else
        geneSetM[g11,] <- 1
 #   print(length(g11)) #table(g11)
#    print(table(geneSetM[, ii]))

    }


nStop = length(p1)
geneSetA <- as.data.frame(geneSetM[, 1])
i0=2
rValueNew <- NULL
rValueNew[1] <- returnValue0$objective #value
ij=1
indexGene <- 1
geneOut <- NULL
tOut <- c(round(returnValue0$objective, 3), "Intercept")

nMax <- length(p1)
#nMax <- 6
while (ij <= nMax) {

    nCol <- ncol(dD)
    nRow <- nrow(dD)
    geneSet <- data.frame(geneSetM[, sort(unique(c(indexGene, ij)))])
    nGeneSet <- ncol(geneSet)
    message("nGeneSet: ", nGeneSet)
    pars <- c(2, 30, 1, 1, rep(1, nGeneSet), 1)
#pT = 1

    llk1 <- function(pars){
        hyperGammaMean <- pars[1:nCol]
        hyperBeta <- pars[(nCol + 1):(2*nCol)]
        alpha0 <- pars[(2*nCol+1):(2*nCol + nGeneSet)]
        alphaIntercept <- tail(pars, 1)
        f0 <- f1 <- 1
        for (j in 1:nCol){
            f0 <- f0*dpois(dD[, j], 2*nFamily[j]*muRate[, j])
            f1<- f1*dnbinom(dD[, j], hyperGammaMean[j]*hyperBeta[j], hyperBeta[j]/(hyperBeta[j] + 2*nFamily[j]*muRate[, j]))
            }
        pi1 <- apply(geneSet, 1, function(x){
            #pi1 = exp(geneSet)/(1 + exp(geneSet))
            exp0 <- exp(alphaIntercept + sum(alpha0*x))
            return(exp0/(1 + exp0))})
        tllk <- sum(log(f1*pi1 + (1 - pi1)*f0))
###lasso
#        tllk <- tllk - pT*sum(abs(alpha0))
#ridge 
#        tllk <- tllk - pT*sum((alpha0^2))

        return(-tllk)
    }


    
#    system.time(returnValue <- optim(par = pars, fn = llk1,
 #                        lower = c(rep(1, nCol), rep(0.8, nCol), rep(-10, nGeneSet + 1)),
  #                       upper = c(rep(200, nCol), rep(200, nCol), rep(10, nGeneSet + 1))))
returnValue <-    nlminb(start = pars, objective=llk1,
       lower = c(rep(1, nCol), rep(0.8, nCol), rep(-10, nGeneSet + 1)),
       upper = c(rep(200, nCol), rep(200, nCol), rep(10, nGeneSet + 1)))


    message("logLLK: ", returnValue$objective)
    if ((returnValue$objective - rValueNew[i0-1]) < -2){
        indexGene <- c(indexGene, ij)
        
#        geneSetA <- cbind(geneSetA, geneSetName[, jj])
        rValueNew[i0] <- returnValue$objective #value
        i0 <- i0 + 1

        message("i0: ", i0)
        geneOut <- c(round(returnValue$objective, 2), geneSetName[ij])
        tOut <- rbind(tOut, geneOut ) #c(tOut, returnValue$value, pT, returnValue0$par, returnValue$par)
#        tOut <- round(tOut, 3)
        write.table(tOut, paste0(OUTDIR_LLK, "/TestlogLLKxem.AddGenes.",
                                 annotationType, ".", annotationType2, ".",
                            "txt2"),
            quote = FALSE, col.names = FALSE, row.names = FALSE)
        message("ADD gene set: ", geneSetName[ij])

    } else {
                message("REMOVE gene set: ", geneSetName[ij])
    }



    ij = ij + 1

    message("geneSetM: ", (dim(geneSetM)))
    message("Running: ", ij)
    
}
